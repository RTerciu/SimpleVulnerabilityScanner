
@{
    ViewBag.Title = "Cerinta";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Cerinta</h2>


*** Tema de casa pentru cursul Razboi Cibernetic 2016 ***
<br />

Tema: Scanner de vulnerabilitati web<br />
====================================<br />
Scrieti un scanner de vulnerabilitati web care sa detecteze urmatoarele tipuri de vulnerabilitati:<br />
    1. SQL injection<br />
		https://www.owasp.org/index.php/SQL_Injection<br />
    2. OS command execution<br />
		https://www.owasp.org/index.php/Command_Injection <br />
    3. Local file inclusion<br />
		https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion <br />

Rezultatul temei nu trebuie sa fie un scanner complet de vulnerabilitati web, ci sa detecteze in forma cea mai simplista vulnerabilitatile respective.
Nu trebuie sa mai implementati componenta de crawler a scannerului. Aplicatia voastra va primi ca intrare un singur url unde va trebui sa gasesca vulnerabilitati.<br />

<br />
Trimiterea temei<br />
================<br />
- Tema va fi trimisa individual si va contine numele si prenumele autorului<br />
- Termenul de trimitere este pana in ziua examenului la aceasta materie, inclusiv<br />
- Tema trimisa va trebui sa contina codul sursa (obligatoriu) si executabilul (unde este cazul)<br />
<br />
<br />
Evaluarea temei<br />
===============<br />
Aplicatia voastra va fi folosita pentru a identifica vulnerabilitati in doua aplicatii vulnerabile:<br />
	- Target 1: DVWA - http://www.dvwa.co.uk/ <br />
	- Target 2: Mutillidae - http://sourceforge.net/projects/mutillidae/ <br />
Cele doua aplicatii target sunt preinstalate in masina virtuala Metasploitable (http://sourceforge.net/projects/metasploitable/) sau pot fi instalate individual pe masinile proprii. <br />
<br />
Pentru a va verifica implementarea, puteti folosi urmatoarele url-uri vulnerabile: <br />
	- Target 1: <br />
		http://[ip_metasploitable]/dvwa/vulnerabilities/sqli/ <br />
		http://[ip_metasploitable]/dvwa/vulnerabilities/exec/ <br />
		http://[ip_metasploitable]/dvwa/vulnerabilities/fi/?page=include.php <br />
<br />
		Nota: Pentru DVWA nu trebuie sa implementati autentificarea. Considerati ca sunteti deja autentificat in site si adaugati la fiecare request cookie-ul luat manual din browser (dupa cum am discutat la curs): "PHPSESSIONID= .....; security=low". Nu uitati de security=low!
<br />
	- Target 2: <br />
		http://[ip_metasploitable]/mutillidae/index.php?page=user-info.php <br />
		http://[ip_metasploitable]/mutillidae/index.php?page=dns-lookup.php <br />
		http://[ip_metasploitable]/mutillidae/index.php?page=arbitrary-file-inclusion.php <br />
<br />
Aplicatia trebuie sa raporteze pagina (url-ul) care contine vulnerabilitatea, parametrul vulnerabil si tipul de vulnerabilitate identificat. <br />
De exemplu: <br />
		Vulnerability found:        OS Command Execution  <br />
				Page:       http://[ip_metasploitable]/dvwa/vulnerabilities/exec/ <br />
				Parameter:  id <br />
<br />
Aplicatia nu trebuie sa produca false positives (adica sa raporteze vulnerabilitati acolo unde nu sunt).
De asemenea, aplicatia trebuie sa identifice vulnerabilitati si pe alte pagini similare cu cele de mai sus (prin urmare nu trebuie sa 'hardcodati' nimic).
<br />
<br />

Detalii pentru implementare<br />
========================<br />
Pentru simplitatea implementarii, aplicatia voastra ar trebui sa urmeze pasii de mai jos:<br />
	1. Primeste URL de la intrare<br />

	2. Detecteaza punctele de injectie asociate cu URL-ul respectiv:<br />
		- parametrii din url (ex. ?page=xxxx&action=yyyy)<br />
		- form-urile din codul HTML al paginii<br />
		ex.
<xmp>
    <form action="#" method="GET">
        <input type="text" name="id">
        <input type="submit" name="Submit" value="Submit">
    </form>
</xmp>
		- link-uri catre alte pagini din site care au parametri<br />
			ex.
<xmp>a href="/index.php?p=5">link</xmp>
<br />
	3. Pentru fiecare punct de injectie descoperit anterior, detecteaza daca exista o vulnerabilitate<br />
<br />
		3.1 Detectie SQL injection<br />
<br />				- se trimite cate un HTTP request pentru fiecare parametru din punctul de injectie. La parametru se adauga apostrof. Ex: /page.php?id=1'
<br />				- daca raspunsul contine textul "You have an error in your SQL syntax", atunci parametrul este vulnerabil

<br />		3.2 Detectie OS Command Injection
<br />				- se trimite cate un HTTP request pentru fiecare parametru din punctul de injectie. La parametru se adauga secventa: "x; ping -c 1 127.0.0.1"
<br />				- daca raspunsul contine textul "PING 127.0.0.1", atunci parametrul este vulnerabil

<br />		3.3 Detectie Local File Inclusion
<br />				- se trimite cate un HTTP request pentru fiecare parametru din punctul de injectie. Parametrul va fi "../../../../../../../etc/passwd"
<br />				- daca raspunsul contine textul "root:x:0:0:root:", atunci parametrul este vulnerabil
