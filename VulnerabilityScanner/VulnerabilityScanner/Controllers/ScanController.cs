using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Threading.Tasks;
using VulnerabilityScanner.Models;

namespace VulnerabilityScanner.Controllers
{
    public class ScanController : Controller
    {
        // GET: Scan
        public ActionResult Index()
        {
            return View();
        }

        

        [HttpPost]
        [ValidateAntiForgeryToken]
        public  ActionResult Index(String Url,String Cookie)
        {
           

            //Primesc request-ul si initializez modelul
            ScanViewModel model = new ScanViewModel();
            model.scannedUrl = Url;
            model.cookie = Cookie;


            //Verific ca am primit un URL absolut
            Uri uriResult;
            bool result = Uri.TryCreate(Url, UriKind.Absolute, out uriResult)
                && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);

            if (result == false)
            {
                model.Message = "Introduceti un URL valid!";
                return View(model);
            }


            //Instantiez clasa Scannner lista pe puncte de injectie
            Scanner scanner = new Scanner();
            List<InjectionPoint> injectionPoints = new List<InjectionPoint>();
            //Pornesc scanarea, care imi produce ca rezultat de return vulnerabilitatile ca si lista,
            //iar prin parametrul referinta pot  sa folosesc si lista de puncte de 
            //injectare
            model.rezultateScanare =scanner.StartScan(Url,Cookie,ref injectionPoints);
            model.injectionPoints = injectionPoints;

            //Atasez modelului si trimit catre view
            return View(model);


        }

        public ActionResult Cerinta()
        {


            return View();
        }


        public ActionResult Docs()
        {


            return View();
        }
    }
}