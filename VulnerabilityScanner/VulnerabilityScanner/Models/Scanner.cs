using System;
using System.Net;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using HtmlAgilityPack;

namespace VulnerabilityScanner.Models
{
    public class Scanner
    {



        private String responseOfGetHtmlUrl(String Url, String Cookie)
        {

            WebClient request = new WebClient();
            request.Headers.Add(HttpRequestHeader.Cookie, Cookie);           
            
            return request.DownloadString(Url);
        }

        private String VulnerabilityTypeCheck(String html)
        {


            if (String.IsNullOrEmpty(html))
                            return String.Empty;
            if (html.IndexOf("You have an error in your SQL syntax") != -1)
                             return "SQL injection";
            if (html.IndexOf("PING 127.0.0.1") != -1)
                            return "OS Command Execution";
            if (html.IndexOf("root:x:0:0:root:") != -1)
                            return "Local file inclusion";


            return String.Empty;

        }

        private void searchInjectionPoints(HtmlDocument doc, ref List<InjectionPoint> lista)
        {

            //Caut toate elementele de tip "input" si iau numele lor, actiune formului si metoda formului

            //caut toate form-urile

            HtmlNode.ElementsFlags.Remove("form");
            HtmlNode[] formNodes = doc.DocumentNode.SelectNodes("//form") != null ? doc.DocumentNode.SelectNodes("//form").ToArray() : null;
            if (formNodes != null)//daca avem form-uri in pagina
            {
                foreach (HtmlNode form in formNodes)//selectam fiecare form
                {
                    //pentru fiecare form iau urmatorii parametrii: action si method

                    String method = form.Attributes["method"] != null ? form.Attributes["method"].Value.ToString() : "GET";
                    String actionUrl = form.Attributes["action"] != null ? form.Attributes["action"].Value.ToString() : "";

                    HtmlNode[] inputNodes = form.Descendants("input").ToArray();//si iau fiecare input al formului

                    foreach (HtmlNode input in inputNodes)//si pentru fiecare input iau numele si valoarea curenta si adaug la injection points
                    {

                        String name = input.Attributes["name"] != null ? input.Attributes["name"].Value.ToString() : "";
                        String value = input.Attributes["value"] != null ? input.Attributes["value"].Value.ToString() : "";
                        InjectionPoint aux = new InjectionPoint();
                        aux.formMethod = method;
                        aux.ParameterName = name;
                        aux.ParameterValueAsEncountered = value;
                        aux.UrlAction = actionUrl;


                        lista.Add(aux);

                    }
                }
            }







            //Caut elementele de tip "a" care contin parametrii in url si iau numele parametrilor, url-ul in sine si metoda=GET
            HtmlNode[] nodes = doc.DocumentNode.SelectNodes("//a").ToArray();
            foreach (HtmlNode node in nodes)
            {
                var auxUrl = node.Attributes["href"];
                if (auxUrl == null)
                    continue;

                String url=node.Attributes["href"].Value.ToString();
                int hasParams = url.IndexOf('?');

              
                if (hasParams!=-1)
                {
                    var q = url.Substring(url.IndexOf('?'));
                    var query = HttpUtility.ParseQueryString(q);
                    foreach (String c in query.Keys)
                    {
                        if (c != null)
                        {
                            InjectionPoint aux = new InjectionPoint();
                            aux.formMethod = "GET";
                            aux.ParameterName = c;
                            aux.ParameterValueAsEncountered = query[c];
                            aux.UrlAction = url.Substring(0, url.IndexOf("?"));


                            lista.Add(aux);
                        }
                    }
                }

            }

        }

        private void checkUrlParameters(String Url, ref List<InjectionPoint>lista)
        {

           
            var uri = new Uri(Url);
            var query = HttpUtility.ParseQueryString(uri.Query);
            foreach (String c in query.Keys)
            {
                InjectionPoint aux = new InjectionPoint();
                aux.formMethod = "GET";
                aux.ParameterName = c.ToString();
                aux.ParameterValueAsEncountered = query[c];
                aux.UrlAction= Url.Substring(0, Url.IndexOf("?"));


                lista.Add(aux);
            }
                      

        }

        public List<ScanResult> StartScan(String Url, String Cookie, ref List<InjectionPoint> injectionPoints)
        {
            List<ScanResult> lista = new List<ScanResult>();

            /*
            //Adaug manual cateva rezultate de test            ScanResult s1 = new ScanResult("OS Command Execution", @"http://192.168.194.132/dvwa/vulnerabilities/exec/", "id");
            ScanResult s2 = new ScanResult("SQL injection", @"http://192.168.194.132/dvwa/vulnerabilities/exec/", "id");
            ScanResult s3 = new ScanResult("Local file inclusion", @"http://192.168.194.132/dvwa/vulnerabilities/exec/", "id");
            lista.Add(s1);
            lista.Add(s2);
            lista.Add(s3);
            */




            HtmlDocument page = new HtmlDocument();
            page.LoadHtml(responseOfGetHtmlUrl(Url, Cookie));
           
            
            //Caut in URL-ul propriu zis daca exista  parametrii si il adaug la injection points
            checkUrlParameters(Url,ref injectionPoints);

            //Caut in pagina form-uri si parametrii in form, dar si anchore cu parametrii
            searchInjectionPoints(page,ref injectionPoints);

            int x = 1;

            //Parcurg lista de injection points si fac un request pentru fiecare punct, astept raspunsul si 
            //verific ce primesc in raspuns

            return lista;
        }
    }
}