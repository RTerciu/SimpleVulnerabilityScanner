using System;
using System.Net;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Threading.Tasks;
using HtmlAgilityPack;

namespace VulnerabilityScanner.Models
{
    public class Scanner
    {

        private String UrlToScan;
        private String CookieForPage;
        private List<InjectionPoint> finalInjectionPointList;


        /*
         * Returneaza daca un URL este Absolut 
         */
        private bool isAbsoluteUrl(String url)
        {

            Uri result;
            return Uri.TryCreate(url, UriKind.Absolute, out result);
        }


        private String buildDummyParamString(String name)
        {
            String DummyParamString = "";

            List<InjectionPoint> onlyForm = finalInjectionPointList.Where(i => i.Origin == 1).ToList();
            foreach (InjectionPoint i in onlyForm)
            {
                if (i.ParameterName != name)
                {
                    String value = i.ParameterValueAsEncountered != "" ? i.ParameterValueAsEncountered : i.ParameterValueAsEncountered;

                    DummyParamString += "&" + i.ParameterName + "=" + value;
                }
            }

            return DummyParamString;
        }

        /* Folosint WebClient face un 
         * request de TIP GET
         * setand cookie-ul si parametrii
         *       
         */
        private String responseOfGetHtmlUrl(String Url, String Cookie, String parameters)
        {

            WebClient request = new WebClient();

            if(Cookie!=null)
                request.Headers.Add(HttpRequestHeader.Cookie, Cookie);

            if (parameters != null)
            {

                if(Url.IndexOf('?')!=-1)
                    Url = Url + "&" + parameters;
                else
                    Url = Url + "?" + parameters;


            }
            /*if (!isAbsoluteUrl(Url))
            {

                Url = this.UrlToScan.Substring(0, this.UrlToScan.LastIndexOf('/')) + "/" + Url;
            }*/

            string response;
            try
            {
                response = request.DownloadString(Url);
                return response;
            }
            catch (Exception e)
            {

                response = "Error";
                return response;

            }

            
        }

        /* Folosint WebClient face un 
         * request de tip POST
         * setand cookie-ul si parametrii    
         */
        private String responseOfPostHtmlUrl(String Url, String Cookie,String Parameters)
        {
            using (WebClient wc = new WebClient())
            {
                wc.Headers[HttpRequestHeader.ContentType] = "application/x-www-form-urlencoded";

                if (Cookie != null)
                    wc.Headers.Add(HttpRequestHeader.Cookie, Cookie);


                if (String.IsNullOrEmpty(Url) || Url == "#")
                    Url = this.UrlToScan+Url;

                if (!isAbsoluteUrl(Url))
                {

                    Url = this.UrlToScan.Substring(0, this.UrlToScan.LastIndexOf('/')) + "/" + Url;
                }

                return wc.UploadString(Url, Parameters);
            }

        }

        /* Primeste HTML-ul primit ca raspuns si cata in textul
         * raspunsului "marcatorii" pentru diversele tipuri de 
         * vulnerabilitati si intoarce un String cu numele
         * vulnerabilitatii         
         */
        private String VulnerabilityTypeCheck(String html)
        {


            if (String.IsNullOrEmpty(html))
                            return String.Empty;
            if (html.IndexOf("You have an error in your SQL syntax") != -1)
                             return "SQL injection";
            if (html.IndexOf("PING 127.0.0.1") != -1)
                            return "OS Command Execution";
            if (html.IndexOf("root:x:0:0:root:") != -1)
                            return "Local file inclusion";


            return String.Empty;

        }

        /* Preia un doc parsat deja cu Html Agility Pack, si o lista prin referinta.
         * Cauta form-uri si ancore care se potrivesc a fi vulnerabile.
         * La gasirea lor se adauga in lista de posibile puncte de injectie         
         */

        private void searchInjectionPoints(HtmlDocument doc, ref List<InjectionPoint> lista)
        {

            //Caut toate elementele de tip "input" si iau numele lor, actiune formului si metoda formului

            //caut toate form-urile

            HtmlNode.ElementsFlags.Remove("form");
            HtmlNode[] formNodes = doc.DocumentNode.SelectNodes("//form") != null ? doc.DocumentNode.SelectNodes("//form").ToArray() : null;
            if (formNodes != null)//daca avem form-uri in pagina
            {
                foreach (HtmlNode form in formNodes)//selectam fiecare form
                {
                    //pentru fiecare form iau urmatorii parametrii: action si method

                    String method = form.Attributes["method"] != null ? form.Attributes["method"].Value.ToString() : "GET";
                    String actionUrl = form.Attributes["action"] != null ? form.Attributes["action"].Value.ToString() : "";

                    HtmlNode[] inputNodes = form.Descendants("input").ToArray();//si iau fiecare input al formului

                    foreach (HtmlNode input in inputNodes)//si pentru fiecare input iau numele si valoarea curenta si adaug la injection points
                    {

                        String name = input.Attributes["name"] != null ? input.Attributes["name"].Value.ToString() : "";
                        String value = input.Attributes["value"] != null ? input.Attributes["value"].Value.ToString() : "";
                        InjectionPoint aux = new InjectionPoint();
                        aux.formMethod = method;
                        aux.ParameterName = name;
                        aux.ParameterValueAsEncountered = value;
                        aux.UrlAction = actionUrl;
                        aux.Origin = 1;

                        //Daca nu avem deja un parametru cu acelasi nume adaugat, il adaugam
                        if (!lista.Exists(i => i.ParameterName == name))
                                        lista.Add(aux);

                    }
                }
            }







            //Caut elementele de tip "a" care contin parametrii in url si iau numele parametrilor, url-ul in sine si metoda=GET
            HtmlNode[] nodes = doc.DocumentNode.SelectNodes("//a").ToArray();
            foreach (HtmlNode node in nodes)
            {
                var auxUrl = node.Attributes["href"];

                //Daca gasesc ancore fara camp de href (poate sa aiba definit un event Onclick sau similar) trec la urmatoarea iteratie a foreach-ului
                if (auxUrl == null)
                    continue;

                String url=node.Attributes["href"].Value.ToString();
                int hasParams = url.IndexOf('?');

               //Daca URL-ul nu are parametrii, nu are rost sa il tratam (-1=nu am gasim ? in URL)
                if (hasParams!=-1)
                {
                    var q = url.Substring(url.IndexOf('?'));
                    var query = HttpUtility.ParseQueryString(q);
                    foreach (String c in query.Keys)
                    {
                        if (c != null)
                        {
                            InjectionPoint aux = new InjectionPoint();
                            aux.formMethod = "GET";
                            aux.ParameterName = c;
                            aux.ParameterValueAsEncountered = query[c];
                            aux.UrlAction = url.Substring(0, url.IndexOf("?"));
                            aux.Origin = 2;

                            //Daca nu exista deja parametrul cu acelasi nume ( spre ex: "page" este prezent la toate linkurile din menu la 	Mutillidae)
                            if (!lista.Exists(i=>i.ParameterName==c))
                                        lista.Add(aux);
                        }
                    }
                }

            }

        }


        /* Verifica daca URL-ul de start, este el in sine vulnerabil prin parametrii din el
         * si adauga la aceasi lista de injectie toti parametrii din URL
         */
        private void checkUrlParameters(String Url, ref List<InjectionPoint>lista)
        {

           
            var uri = new Uri(Url);
            var query = HttpUtility.ParseQueryString(uri.Query);
            foreach (String c in query.Keys)
            {
                InjectionPoint aux = new InjectionPoint();
                aux.formMethod = "GET";
                aux.ParameterName = c.ToString();
                aux.ParameterValueAsEncountered = query[c];
                aux.UrlAction= Url.Substring(0, Url.IndexOf("?"));
                aux.Origin = 2;

                if (!lista.Exists(i => i.ParameterName == c))
                    lista.Add(aux);
            }
                      

        }


        /*FUNCTIA PRINCIPALA A CLASEI - SINGURA PUBLICA
         *  Preia URL-ul si Cookie-urile , cat si o lista de puncte de injectii
         *  Returneaza o lista de vulnerabilitati
         *     
         */
        public List<ScanResult> StartScan(String Url, String Cookie, ref List<InjectionPoint> injectionPoints)
        {
            //Setez metodele clasei
            this.UrlToScan = Url;
            this.CookieForPage = Cookie;

            //instantiez lista de vulnerabilitati
            List<ScanResult> lista = new List<ScanResult>();

            //Incarc pagina initiala, unde trebuie sa gasesc puncte de injectie
            HtmlDocument page = new HtmlDocument();
            page.LoadHtml(responseOfGetHtmlUrl(Url, Cookie,null));
           
            
            //Caut in URL-ul propriu zis daca exista  parametrii si ii adaug la injection points
            checkUrlParameters(Url,ref injectionPoints);

            //Caut in pagina form-uri si parametrii in form, dar si anchore cu parametrii
            searchInjectionPoints(page,ref injectionPoints);

            //construiesc parametrii "Dummy" pentru request-uri
            finalInjectionPointList = injectionPoints;
            

            //Parcurg lista de injection points si fac un request pentru fiecare punct, astept raspunsul si 
            //verific ce primesc in raspuns
            foreach (InjectionPoint p in injectionPoints)
            {
                checkVulnerability(p, ref lista);                

            }
            return lista;
        }


        /* Functia care verifica daca un punct de injectie este intr-adevar o vulnerabilitate
         * Preia un element de tip InjectionPoin si faca request-urile cu parametrii potriviti 
         * si se verifica raspunsul
         *           
         */
        private void checkVulnerability(InjectionPoint i, ref List<ScanResult> vulnerabilitati)
        {
            //Trebuie sa verific un parametru pentru toate cele trei tipuri de vulnerabilitati
            String DummyParamString= buildDummyParamString(i.ParameterName);

            String sqliParam = i.ParameterName+"="+ "\'"+DummyParamString;
            String cmdiParam = i.ParameterName+"="+ "x;+ping+-c+1+127.0.0.1" + DummyParamString;
            String lfliParam = i.ParameterName + "=" + "../../../../../../../etc/passwd" + DummyParamString;


            
            if (i.formMethod.ToUpper() == "GET")
            {
                //Fac cele 3 request-uri
                String response1 = responseOfGetHtmlUrl(this.UrlToScan, this.CookieForPage, sqliParam);
                String response2 = responseOfGetHtmlUrl(this.UrlToScan, this.CookieForPage, cmdiParam);
                String response3 = responseOfGetHtmlUrl(this.UrlToScan, this.CookieForPage, lfliParam);

                //Verific fiecare response daca contine stringurile care marcheaza prezenta vulnerabilitatii
                String responseCheck1 = VulnerabilityTypeCheck(response1);
                String responseCheck2 = VulnerabilityTypeCheck(response2);
                String responseCheck3 = VulnerabilityTypeCheck(response3);

                //Daca exista vreo vulnerabilitate, adaug in lista de vulnerabilitati
                if (responseCheck1 != String.Empty)
                {
                    ScanResult rezultat = new ScanResult(responseCheck1, this.UrlToScan, i.ParameterName);
                    vulnerabilitati.Add(rezultat);

                }
                if (responseCheck2 != String.Empty)
                {
                    ScanResult rezultat = new ScanResult(responseCheck2, this.UrlToScan, i.ParameterName);
                    vulnerabilitati.Add(rezultat);
                }
                if (responseCheck3 != String.Empty)
                {
                    ScanResult rezultat = new ScanResult(responseCheck3, this.UrlToScan, i.ParameterName);
                    vulnerabilitati.Add(rezultat);
                }


            }
            else if (i.formMethod.ToUpper() == "POST")
            {

                //Fac cele 3 request-uri
                String response1 = responseOfPostHtmlUrl(i.UrlAction, this.CookieForPage, sqliParam);
                String response2 = responseOfPostHtmlUrl(i.UrlAction, this.CookieForPage, cmdiParam);
                String response3 = responseOfPostHtmlUrl(i.UrlAction, this.CookieForPage, lfliParam);

                //Verific fiecare response daca contine stringurile care marcheaza prezenta vulnerabilitatii
                String responseCheck1 = VulnerabilityTypeCheck(response1);
                String responseCheck2 = VulnerabilityTypeCheck(response2);
                String responseCheck3 = VulnerabilityTypeCheck(response3);

                //Daca exista vreo vulnerabilitate, adaug in lista de vulnerabilitati
                if (responseCheck1 != String.Empty)
                {
                    ScanResult rezultat = new ScanResult(responseCheck1, this.UrlToScan, i.ParameterName);
                    vulnerabilitati.Add(rezultat);

                }
                if (responseCheck2 != String.Empty)
                {
                    ScanResult rezultat = new ScanResult(responseCheck2, this.UrlToScan, i.ParameterName);
                    vulnerabilitati.Add(rezultat);
                }
                if (responseCheck3 != String.Empty)
                {
                    ScanResult rezultat = new ScanResult(responseCheck3, this.UrlToScan, i.ParameterName);
                    vulnerabilitati.Add(rezultat);
                }


            }


        }
    }
}